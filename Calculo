**free

  // -------------------------------------------------------------------
  // --                                                               --
  // -- Programa:      TJTP800                                        --
  // -- Descripcion:   Recalculo de intereses                         --
  // -- Desarrollador: Cesar Banegas                                  --
  // -- Fecha:         Julio 27, 2025                                 --
  // --                                                               --
  // -------------------------------------------------------------------
  // --             Historial de Cambios                              --
  // --                                                               --
  // -------------------------------------------------------------------

  // Opciones para compilacion
  ctl-opt option(*srcstmt :*nodebugio)
          dftactgrp(*no)
          bnddir('BANTRABOBJ/BTUTIL');

  // Definicion de archivos
  dcl-f btcatalog disk(*ext) keyed usage(*input);
  dcl-f tjtf014 disk(*ext) keyed usage(*input);
  dcl-f tjtf00810 disk(*ext) keyed usage(*input);
  dcl-f tjtf01010 disk(*ext) keyed usage(*input);
  dcl-f tjtf04610 disk(*ext) keyed usage(*input);
  dcl-f tjtf036 disk(*ext) usage(*output);
  dcl-f tjtf037 disk(*ext) keyed usage(*input);

  // Parametros de entrada
  dcl-pi *N;
    @@Fecha date;
  end-pi;

  // Declaracion de procedimientos externos
  dcl-pr PrmGlobal extproc('PRM_GLOBAL');
    $Error char(2);
    $CodEmp char(1);
    $UsoWcl char(1);
  end-pr PrmGlobal;

   // Declaracion de sub procedimientos
   dcl-pr GrabarInt end-pr;

  // Declarar variables locales a utilizar
  dcl-s $EndProgram char(1) inz('N');
  dcl-s $Dia packed(2);
  dcl-s $Error char(2);
  dcl-s $Base packed(3) inz(365);
  dcl-s $Pcon packed(13 :2);
  dcl-s $Pmin packed(13 :2);
  dcl-s $Fcorte date;
  dcl-s $Fpago date;
  dcl-s $Fec0 date;
  dcl-s $$Fec0 date;
  dcl-s $Fec1 date;
  dcl-s $$Fec1 date;
  dcl-s $Fec2 date;
  dcl-s $$Fec2 date;
  dcl-s $Fec3 date;
  dcl-s $$Fec3 date;
  dcl-s $xp packed(10);
  dcl-s $xd packed(10);
  dcl-s $xs packed(10);
  dcl-s $xsa packed(10);
  dcl-s $Cuenta char(12);
  dcl-s $Moneda packed(3);
  dcl-s $TipImp packed(2);
  dcl-s $TipoLin char(4);
  dcl-s $IntEC1 packed(11 :2);
  dcl-s $IntEC2 packed(11 :2);
  dcl-s $IntEC3 packed(11 :2);
  dcl-s $IntEC3a packed(11 :2);
  dcl-s $ComEC0 packed(11 :2);
  dcl-s $ComEC1 packed(11 :2);
  dcl-s $ComEC2 packed(11 :2);
  dcl-s $DifComEC1 packed(11 :2);
  dcl-s $SaldoEC1 packed(11 :2);
  dcl-s $pec1 packed(13 :4) dim(31);
  dcl-s $pec2 packed(13 :4) dim(31);
  dcl-s $pec3 packed(13 :4) dim(31);
  dcl-s $po packed(13 :4) dim(31);
  dcl-s $cec1 packed(13 :4) dim(31);
  dcl-s $cec2 packed(13 :4) dim(31);
  dcl-s $cec2a packed(13 :4) dim(31);
  dcl-s $caec2 packed(13 :4) dim(31);
  dcl-s $co packed(13 :4) dim(31);
  dcl-s $TotPagos packed(11 :2);
  dcl-s $TotConsumos packed(11 :2);
  dcl-s $Factual date;
  dcl-s $EndPago char(1);
  dcl-s $EndConsumo char(1);
  dcl-s $PagAftFmp packed(13 :4);
  dcl-s $PnetoEC1 packed(13 :4);
  dcl-s $PnetoEC2 packed(13 :4);
  dcl-s $ConsumosEC1 packed(13 :4);
  dcl-s $ConsumosEC2 packed(13 :4);
  dcl-s $Santiguo packed(11 :2);
  dcl-s $Santc packed(11 :2);
  dcl-s $IntCorteAnt packed(11 :2);
  dcl-s $Pagos packed(11 :2);
  dcl-s $CatMne char(15);
  dcl-s $CatKey char(20);
  dcl-s $CodEmp char(1);
  dcl-s $UsoWcl char(1);
  dcl-s $Flag char(1);
  dcl-s $iNec2 packed(8 :6) dim(31);
  dcl-s $iNec3 packed(8 :6) dim(31);
  dcl-s $PagoCompra packed(13 :4);
  dcl-s $sa packed(13 :4) dim(31);
  dcl-s $isa packed(13 :4) dim(31);
  dcl-s $DiasCortes packed(10);
  dcl-s $DiasCalc packed(10);
  dcl-s $Currency char(3);
  dcl-s $ic packed(13 :4) dim(31);
  dcl-s $icaec2 packed(13 :4) dim(31);

  // Cargar datos requeridos para diferentes calculos
  $Dia = %subdt(@@Fecha :*DAYS);
  $Fec3 = @@Fecha;
  $$Fec3 = $Fec3 + %days(1);

  // Obtener parametros globales
  PrmGlobal($Error :$CodEmp :$UsoWcl);
  If $Error <> '00';
    $EndProgram = 'S';
  EndIf;

  // Logica principal del programa
  DoW $EndProgram <> 'S';
    read tjtf014;
    If %eof(tjtf014);
      $EndProgram = 'S';
      iter;
    EndIf;
    If pcugrupoli <> $Dia;
      iter;
    EndIf;
    If pcucuenta = '000000035278';
      $EndProgram = 'N';
    EndIf;
    // Limpia variables de trabajo
    clear $Pcon;
    clear $Pmin;
    clear $Fcorte;
    clear $Fpago;
    clear $IntEC1;
    clear $IntEC2;
    clear $IntEC3;
    clear $IntEC3a;
    clear $ComEC0;
    clear $ComEC1;
    clear $ComEC2;
    clear $SaldoEC1;
    clear $ConsumosEC1;
    clear $ConsumosEC2;
    clear $pec1;
    clear $pec2;
    clear $pec3;
    clear $po;
    clear $PagAftFmp;
    clear $cec1;
    clear $cec2;
    clear $cec2a;
    clear $caec2;
    clear $co;
    clear $TotPagos;
    clear $sa;
    clear $isa;
    clear $ic;
    clear $icaec2;
    clear $ic;
    clear $iNec2;
    clear $iNec3;
    clear $IntCorteAnt;
    clear $Flag;
    clear $Pagos;
    // Obtiene los datos de pago del ultimo estado de cuenta
    setgt (pcucuenta :pcuclamon) tjtf00810;
    readpe (pcucuenta :pcuclamon) tjtf00810;
    If %eof(tjtf00810);
      clear $Pcon;
      clear $Pmin;
      clear $Fcorte;
      clear $Fpago;
    Else;
      readpe (pcucuenta :pcuclamon) tjtf00810;
      If %eof(tjtf00810);
        clear $Pcon;
        clear $Pmin;
        clear $Fcorte;
        clear $Fpago;
      Else;
        $Pcon = eeximptotp;
        $Pmin = eeximpmin;
        $Fcorte = eexfecliq;
        $Fpago = eexfecvalc;
        $xp = %diff($Fpago :$Fcorte :*days);
      EndIf;
    EndIf;
    // Si no ha cortado lo omite
    If $Fcorte = %date('0001-01-01');
      iter;
    EndIf;
    // Obtiene datos adicionales para calculos
    $Cuenta = pcucuenta;
    $Moneda = pcuclamon;
    $Fec0 = $Fcorte - %months(2);
    $$Fec0 = fechapro - %months(2);
    $Fec1 = $Fcorte - %months(1);
    $$Fec1 = fechapro - %months(1);
    $Fec2 = $Fcorte;
    $$Fec2 = fechapro;
    // Obtener datos del corte actual
    $TipImp = 3;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $IntEC3 = etximpfin;
      $IntEC3a = etximpini;
    EndIf;
    // Evaluar si tiene BALCON, INTRA, EXTA
    $TipImp = 1;
    $TipoLin = 'CBAL';
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'B';
        GrabarInt();
        iter;
      Endif;
    EndIf;
    $TipImp = 3;
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'B';
        GrabarInt();
        iter;
      EndIf;
    EndIf;
    $TipImp = 1;
    $TipoLin = 'LINT';
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'J';
        GrabarInt();
        iter;
      EndIf;
    EndIf;
    $TipImp = 3;
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'J';
        GrabarInt();
        iter;
      EndIf;
    EndIf;
    $TipImp = 1;
    $TipoLin = 'LEXT';
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'E';
        GrabarInt();
        iter;
      EndIf;
    EndIf;
    $TipImp = 3;
    chain ($Cuenta :$Moneda :$$Fec3 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      If etximpini > *zeros;
        $Flag = 'E';
        GrabarInt();
        iter;
      EndIf;
    EndIf;
    // Obtener datos de un mes antes
    $TipImp = 3;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $IntEC2 = etximpfin;
    EndIf;
    $TipImp = 2;
    $TipoLin = 'LAVA';
    chain ($Cuenta :$Moneda :$$Fec2 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $ComEC2 += etximpfin;
    EndIf;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec2 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $ComEC2 += etximpfin;
    EndIf;
    $TipImp = 5;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec2 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $ComEC2 += etximpfin;
    EndIf;
    // Obtener datos de dos meses antes
    $TipImp = 1;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $SaldoEC1 = etximpini;
    EndIf;
    $TipoLin = 'LAVA';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $SaldoEC1 += etximpini;
    EndIf;
    $TipImp = 2;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $SaldoEC1 += etximpini;
      $ComEC1 += etximpfin;
      $ComEC0 += etximpini;
    EndIf;
    $TipoLin = 'LAVA';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $SaldoEC1 += etximpini;
      $ComEC1 += etximpfin;
      $ComEC0 += etximpini;
    EndIf;
    $TipImp = 5;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec1 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $SaldoEC1 += etximpini;
      $ComEC1 += etximpfin;
      $ComEC0 += etximpini;
    EndIf;
    $TipImp = 3;
    $TipoLin = 'LREV';
    chain ($Cuenta :$Moneda :$$Fec0 :$TipImp :$TipoLin) tjtf01010;
    If %found(tjtf01010);
      $IntEC1 = etximpfin;
    EndIf;
    // Valida si se generaron intereses en el mes
    If $IntEC3 = *zeros;
      $Flag = 'I';
      GrabarInt();
      iter;
    EndIf;
    // Cargar los pagos del estado de cuenta 1
    $EndPago = 'N';
    $CatMne = 'TCFACPAG';
    $Factual = $$Fec1 - %months(1);
    setll ($Cuenta :$Moneda :$Factual) tjtf04610;
    Dow $EndPago = 'N';
      reade ($Cuenta :$Moneda) tjtf04610;
      If %eof(tjtf04610);
        $EndPago = 'S';
        iter;
      EndIf;
      If mxfepr > $Fec1;
        $EndPago = 'S';
        iter;
      EndIf;
      $CatKey = %editc(mxtifa :'X');
      chain ($CodEmp :$CatMne :$CatKey) btcatalog;
      If not %found(btcatalog);
        iter;
      EndIf;
      $xd = %diff(mxfefa :$Fec0 :*days);
      If $xd <= *zeros;
        $xd = 1;
      EndIf;
      Monitor;
        $pec1($xd) += mximfa;
      On-Error;
        $pec1(1) += mximfa;
      EndMon;
    EndDo;
    // Cargar los pagos del estado de cuenta 2
    $EndPago = 'N';
    $CatMne = 'TCFACPAG';
    $Factual = $$Fec1;
    setll ($Cuenta :$Moneda :$Factual) tjtf04610;
    Dow $EndPago = 'N';
      reade ($Cuenta :$Moneda) tjtf04610;
      If %eof(tjtf04610);
        $EndPago = 'S';
        iter;
      EndIf;
      If mxfepr > $Fec2;
        $EndPago = 'S';
        iter;
      EndIf;
      $CatKey = %editc(mxtifa :'X');
      chain ($CodEmp :$CatMne :$CatKey) btcatalog;
      If not %found(btcatalog);
        iter;
      EndIf;
      $xd = %diff(mxfefa :$Fec1 :*days);
      If $xd <= *zeros;
        $xd = 1;
      EndIf;
      $pec2($xd) += mximfa;
    EndDo;
    // Cargar los pagos del estado de cuenta 3
    $EndPago = 'N';
    $CatMne = 'TCFACPAG';
    $Factual = $$Fec2;
    setll ($Cuenta :$Moneda :$Factual) tjtf04610;
    Dow $EndPago = 'N';
      reade ($Cuenta :$Moneda) tjtf04610;
      If %eof(tjtf04610);
        $EndPago = 'S';
        iter;
      EndIf;
      If mxfepr > $Fec3;
        $EndPago = 'S';
        iter;
      EndIf;
      $CatKey = %editc(mxtifa :'X');
      chain ($CodEmp :$CatMne :$CatKey) btcatalog;
      If not %found(btcatalog);
        iter;
      EndIf;
      $xd = %diff(mxfefa :$Fec2 :*days);
      If $xd <= *zeros;
        $xd = 1;
      EndIf;
      $pec3($xd) += mximfa;
      If mxfefa > $Fpago;
        $PagAftFmp += mximfa;
      EndIf;
    EndDo;
    // Cargar los consumos del estado de cuenta 1
    $EndConsumo = 'N';
    $Factual = $$Fec1 - %months(1);
    setll ($Cuenta :$Moneda :$Factual) tjtf04610;
    Dow $EndConsumo = 'N';
      reade ($Cuenta :$Moneda) tjtf04610;
      If %eof(tjtf04610);
        $EndConsumo = 'S';
        iter;
      EndIf;
      If mxfepr > $Fec1;
        $EndConsumo = 'S';
        iter;
      EndIf;
      If mxtifa = 4937;
        iter;
      EndIf;
      $CatKey = %editc(mxtifa :'X');
      chain ($CodEmp :$CatMne :$CatKey) btcatalog;
      If %found(btcatalog);
        iter;
      EndIf;
      If mxsiim = '-';
        iter;
      EndIf;
      $xd = %diff(mxfefa :$Fec0 :*days);
      If $xd <= *zeros;
        $xd = 1;
      EndIf;
      $cec1($xd) += mximfa;
    EndDo;
    // Cargar los consumos del estado de cuenta 2
    $EndConsumo = 'N';
    $Factual = $$Fec1;
    setll ($Cuenta :$Moneda :$Factual) tjtf04610;
    Dow $EndConsumo = 'N';
      reade ($Cuenta :$Moneda) tjtf04610;
      If %eof(tjtf04610);
        $EndConsumo = 'S';
        iter;
      EndIf;
      If mxfepr > $Fec2;
        $EndConsumo = 'S';
        iter;
      EndIf;
      If mxtifa = 4937;
        iter;
      EndIf;
      $CatKey = %editc(mxtifa :'X');
      chain ($CodEmp :$CatMne :$CatKey) btcatalog;
      If %found(btcatalog);
        iter;
      EndIf;
      If mxsiim = '-';
        iter;
      EndIf;
      $xd = %diff(mxfefa :$Fec1 :*days);
      If $xd <= *zeros;
        $xd = 1;
      EndIf;
      $cec2($xd) += mximfa;
    EndDo;
    $co = $cec2;
    // Obtener el total de pagos antes de la fecha maxima de pago
    For $xd = 1 to $xp;
      $TotPagos += $pec3($xd);
    EndFor;
    // Valida si se efectuo pago de contado
    If $TotPagos >= $Pcon;
      $Flag = 'C';
      GrabarInt();
      iter;
    EndIf;
    // Valida si efectuo el pago minimo
    If $TotPagos < $Pmin;
      $Flag = 'M';
      GrabarInt();
      iter;
    EndIf;
    // Valida si efectuo pagos tardios
    If (($PagAftFmp > *zeros) and ($TotPagos = *zeros));
      $Flag = 'T';
      GrabarInt();
      iter;
    EndIf;
    $po = $pec3;
    // Calcular el saldo antiguo
    If %xfoot($pec1) > *zeros;
      $PnetoEC1 = %xfoot($pec1) - $IntEC1;
    Else;
      clear $PnetoEC1;
    EndIf;
    If %xfoot($pec2) > *zeros;
      $PnetoEC2 = %xfoot($pec2) - $IntEC2;
    Else;
      clear $PnetoEC2;
    EndIf;
    $DifComEC1 = ($ComEC0 - $PnetoEC1);
    If $DifComEC1 > $ComEC1;
      $cec1(31) += ($ComEC1 - $DifComEC1);
    EndIf;
    If $DifComEC1 < *zeros;
      $cec1(31) += $ComEC1;
    EndIf;
    $ConsumosEC1 = %xfoot($Cec1);
    $Santiguo = $SaldoEC1 - $PnetoEC1 + $ConsumosEC1 - $PnetoEC2 - $ComEC2;
    If $Santiguo < *zeros;
      clear $Santiguo;
    EndIf;
    // Aplicar a los pagos el interes adeudado del corte anterior
    $Pagos = %xfoot($pec3);
    If $Pagos > *zeros;
      $IntCorteAnt = $IntEC3a;
      $xs = %diff($Fec3 :$Fcorte :*days);
      For $xd = 1 to $xs;
        If $pec3($xd) > *zeros;
          If $pec3($xd) >= $IntCorteAnt;
            $pec3($xd) = $pec3($xd) - $IntCorteAnt;
            clear $IntCorteAnt;
            leave;
          Else;
            $IntCorteAnt = $IntCorteAnt - $pec3($xd);
            clear $pec3($xd);
          EndIf;
        EndIf;
      EndFor;
    EndIf;
    // Carga las tasas de interes del estado de cuenta 2
    $xs = %diff($Fec2 :$Fec1 :*days);
    If $xs > 31;
      $xs = 31;
    EndIf;
    $Currency = %char(pcuclamon);
    setll (pcusubprod :$Currency :$$Fec1) tjtf037;
    For $xd = 1 to $xs;
      reade (pcusubprod :$Currency) tjtf037;
      If %eof(tjtf037);
        leave;
      EndIf;
      $iNec2($xd) = %dech(((intval / $Base ) / 100) :8 :6);
    EndFor;
    // Carga las tasas de interes del estado de cuenta 2
    $xs = %diff($Fec3 :$Fcorte :*days);
    If $xs > 31;
      $xs = 31;
    EndIf;
    $Currency = %char(pcuclamon);
    setll (pcusubprod :$Currency :$$Fec2) tjtf037;
    For $xd = 1 to $xs;
      reade (pcusubprod :$Currency) tjtf037;
      If %eof(tjtf037);
        leave;
      EndIf;
      $iNec3($xd) = %dech(((intval / $Base ) / 100) :8 :6);
    EndFor;
    // Aplica a los pagos las comisiones del estado de cuenta 2
    For $xd = 1 to $xs;
      If $pec3($xd) > *zeros;
        If $pec3($xd) >= $ComEC2;
          $pec3($xd) -= $ComEC2;
          clear $ComEC2;
        Else;
          $ComEC2 -= $pec3($xd);
          clear $pec3($xd);
        EndIf;
      EndIf;
    EndFor;
    // Aplica a los pagos el saldo antiguo
    $Santc = $Santiguo;
    For $xd = 1 to $xs;
      If $pec3($xd) > *zeros;
        If $pec3($xd) >= $Santc;
          $pec3($xd) = $pec3($xd) - $Santc;
          clear $Santc;
        Else;
          $Santc -= $pec3($xd);
          clear $pec3($xd);
        EndIf;
      EndIf;
      $sa($xd) = $Santc;
    EndFor;
    // Calcula los intereses del saldo antiguo
    For $xd = 1 to $xs;
      $isa($xd) = %dech(($sa($xd) * $iNec3($xd)) :13 :4);
    EndFor;
    // Aplicar a los pagos EC3 las compras del estado de cuenta 2
    $Pagos = %xfoot($pec3);
    If $Pagos > *zeros;
      For $xd = 1 to $xp;
        If $pec3($xd) > *zeros;
          For $xsa = 1 to $xs;
            If $cec2($xsa) > *zeros;
              If $pec3($xd) >= $cec2($xsa);
                $pec3($xd) -= $cec2($xsa);
                clear $cec2($xsa);
              Else;
                $cec2($xsa) = $cec2($xsa) - $pec3($xd);
                clear $pec3($xd);
                leave;
              EndIf;
            EndIf;
          EndFor;
        EndIf;
      EndFor;
    EndIf;
    // Calcular los intereses a los consumos del estado de cuenta 2
    $TotConsumos = %xfoot($cec2);
    If $TotConsumos > *zeros;
      For $xd = 1 to $xs;
        If $xd = 1;
          $cec2a($xd) = $cec2($xd);
        Else;
          $cec2a($xd) = $cec2a($xd-1) + $cec2($xd);
        EndIf;
      EndFor;
      $DiasCortes = %diff($Fec3 :$Fcorte :*days);
      For $xd = 1 to $xs;
        If $cec2a($xd) > *zeros;
          $ic($xd) = %dech(($cec2a($xd)*$iNec2($xd)) :13 :4);
        EndIf;
      EndFor;
    EndIf;
    // Carga el importe acumulado consumos EC2
    $ConsumosEC2 = %xfoot($cec2);
    For $xd = 1 to $xs;
      $caec2($xd) = $ConsumosEC2;
    EndFor;
    // Calcula los intereses del saldo antiguo
    For $xd = 1 to $xs;
      $icaec2($xd) = %dech(($caec2($xd) * $iNec3($xd)) :13 :4);
    EndFor;
    $Flag = 'N';

    // Grabar registro de control
    GrabarInt();
  EndDo;

  *inlr = *on;

  // ------------------------------------------------------------------
  // -- Procedimiento: GrabarInt                                      -
  // -- Descripcion:   Graba el registro de interes                   -
  // ------------------------------------------------------------------
  dcl-proc GrabarInt;
    clear rtjt036;
    rcicta = $Cuenta;
    rcifch = $Fec3;
    rcimon = $Moneda;
    rciint = $IntEC2;
    rcisla = $SaldoEC1;
    rcifmp = $Fpago;
    rcifcr = $Fcorte;
    rcifpa = $Fec2;
    rcifpx = $Fec1;
    rcipmn = $Pmin;
    rcipcn = $Pcon;
    rcic01 = $cec2(1);
    rcic02 = $cec2(2);
    rcic03 = $cec2(3);
    rcic04 = $cec2(4);
    rcic05 = $cec2(5);
    rcic06 = $cec2(6);
    rcic07 = $cec2(7);
    rcic08 = $cec2(8);
    rcic09 = $cec2(9);
    rcic10 = $cec2(10);
    rcic11 = $cec2(11);
    rcic12 = $cec2(12);
    rcic13 = $cec2(13);
    rcic14 = $cec2(14);
    rcic15 = $cec2(15);
    rcic16 = $cec2(16);
    rcic17 = $cec2(17);
    rcic18 = $cec2(18);
    rcic19 = $cec2(19);
    rcic20 = $cec2(20);
    rcic21 = $cec2(21);
    rcic22 = $cec2(22);
    rcic23 = $cec2(23);
    rcic24 = $cec2(24);
    rcic25 = $cec2(25);
    rcic26 = $cec2(26);
    rcic27 = $cec2(27);
    rcic28 = $cec2(28);
    rcic29 = $cec2(29);
    rcic30 = $cec2(30);
    rcic31 = $cec2(31);
    rcip01 = $pec3(1);
    rcip02 = $pec3(2);
    rcip03 = $pec3(3);
    rcip04 = $pec3(4);
    rcip05 = $pec3(5);
    rcip06 = $pec3(6);
    rcip07 = $pec3(7);
    rcip08 = $pec3(8);
    rcip09 = $pec3(9);
    rcip10 = $pec3(10);
    rcip11 = $pec3(11);
    rcip12 = $pec3(12);
    rcip13 = $pec3(13);
    rcip14 = $pec3(14);
    rcip15 = $pec3(15);
    rcip16 = $pec3(16);
    rcip17 = $pec3(17);
    rcip18 = $pec3(18);
    rcip19 = $pec3(19);
    rcip20 = $pec3(20);
    rcip21 = $pec3(21);
    rcip22 = $pec3(22);
    rcip23 = $pec3(23);
    rcip24 = $pec3(24);
    rcip25 = $pec3(25);
    rcip26 = $pec3(26);
    rcip27 = $pec3(27);
    rcip28 = $pec3(28);
    rcip29 = $pec3(29);
    rcip30 = $pec3(30);
    rcip31 = $pec3(31);
    rcis01 = $sa(1);
    rcis02 = $sa(2);
    rcis03 = $sa(3);
    rcis04 = $sa(4);
    rcis05 = $sa(5);
    rcis06 = $sa(6);
    rcis07 = $sa(7);
    rcis08 = $sa(8);
    rcis09 = $sa(9);
    rcis10 = $sa(10);
    rcis11 = $sa(11);
    rcis12 = $sa(12);
    rcis13 = $sa(13);
    rcis14 = $sa(14);
    rcis15 = $sa(15);
    rcis16 = $sa(16);
    rcis17 = $sa(17);
    rcis18 = $sa(18);
    rcis19 = $sa(19);
    rcis20 = $sa(20);
    rcis21 = $sa(21);
    rcis22 = $sa(22);
    rcis23 = $sa(23);
    rcis24 = $sa(24);
    rcis25 = $sa(25);
    rcis26 = $sa(26);
    rcis27 = $sa(27);
    rcis28 = $sa(28);
    rcis29 = $sa(29);
    rcis30 = $sa(30);
    rcis31 = $sa(31);
    rcii01 = $isa(1);
    rcii02 = $isa(2);
    rcii03 = $isa(3);
    rcii04 = $isa(4);
    rcii05 = $isa(5);
    rcii06 = $isa(6);
    rcii07 = $isa(7);
    rcii08 = $isa(8);
    rcii09 = $isa(9);
    rcii10 = $isa(10);
    rcii11 = $isa(11);
    rcii12 = $isa(12);
    rcii13 = $isa(13);
    rcii14 = $isa(14);
    rcii15 = $isa(15);
    rcii16 = $isa(16);
    rcii17 = $isa(17);
    rcii18 = $isa(18);
    rcii19 = $isa(19);
    rcii20 = $isa(20);
    rcii21 = $isa(21);
    rcii22 = $isa(22);
    rcii23 = $isa(23);
    rcii24 = $isa(24);
    rcii25 = $isa(25);
    rcii26 = $isa(26);
    rcii27 = $isa(27);
    rcii28 = $isa(28);
    rcii29 = $isa(29);
    rcii30 = $isa(30);
    rcii31 = $isa(31);
    rcij01 = $ic(1);
    rcij02 = $ic(2);
    rcij03 = $ic(3);
    rcij04 = $ic(4);
    rcij05 = $ic(5);
    rcij06 = $ic(6);
    rcij07 = $ic(7);
    rcij08 = $ic(8);
    rcij09 = $ic(9);
    rcij10 = $ic(10);
    rcij11 = $ic(11);
    rcij12 = $ic(12);
    rcij13 = $ic(13);
    rcij14 = $ic(14);
    rcij15 = $ic(15);
    rcij16 = $ic(16);
    rcij17 = $ic(17);
    rcij18 = $ic(18);
    rcij19 = $ic(19);
    rcij20 = $ic(20);
    rcij21 = $ic(21);
    rcij22 = $ic(22);
    rcij23 = $ic(23);
    rcij24 = $ic(24);
    rcij25 = $ic(25);
    rcij26 = $ic(26);
    rcij27 = $ic(27);
    rcij28 = $ic(28);
    rcij29 = $ic(29);
    rcij30 = $ic(30);
    rcij31 = $ic(31);
    rciq01 = $po(1);
    rciq02 = $po(2);
    rciq03 = $po(3);
    rciq04 = $po(4);
    rciq05 = $po(5);
    rciq06 = $po(6);
    rciq07 = $po(7);
    rciq08 = $po(8);
    rciq09 = $po(9);
    rciq10 = $po(10);
    rciq11 = $po(11);
    rciq12 = $po(12);
    rciq13 = $po(13);
    rciq14 = $po(14);
    rciq15 = $po(15);
    rciq16 = $po(16);
    rciq17 = $po(17);
    rciq18 = $po(18);
    rciq19 = $po(19);
    rciq20 = $po(20);
    rciq21 = $po(21);
    rciq22 = $po(22);
    rciq23 = $po(23);
    rciq24 = $po(24);
    rciq25 = $po(25);
    rciq26 = $po(26);
    rciq27 = $po(27);
    rciq28 = $po(28);
    rciq29 = $po(29);
    rciq30 = $po(30);
    rciq31 = $po(31);
    rcid01 = $co(01);
    rcid02 = $co(02);
    rcid03 = $co(03);
    rcid04 = $co(04);
    rcid05 = $co(05);
    rcid06 = $co(06);
    rcid07 = $co(07);
    rcid08 = $co(08);
    rcid09 = $co(09);
    rcid10 = $co(10);
    rcid11 = $co(11);
    rcid12 = $co(12);
    rcid13 = $co(13);
    rcid14 = $co(14);
    rcid15 = $co(15);
    rcid16 = $co(16);
    rcid17 = $co(17);
    rcid18 = $co(18);
    rcid19 = $co(19);
    rcid20 = $co(20);
    rcid21 = $co(21);
    rcid22 = $co(22);
    rcid23 = $co(23);
    rcid24 = $co(24);
    rcid25 = $co(25);
    rcid26 = $co(26);
    rcid27 = $co(27);
    rcid28 = $co(28);
    rcid29 = $co(29);
    rcid30 = $co(30);
    rcid31 = $co(31);
    intr01 = $inec2(1);
    intr02 = $inec2(2);
    intr03 = $inec2(3);
    intr04 = $inec2(4);
    intr05 = $inec2(5);
    intr06 = $inec2(6);
    intr07 = $inec2(7);
    intr08 = $inec2(8);
    intr09 = $inec2(9);
    intr10 = $inec2(10);
    intr11 = $inec2(11);
    intr12 = $inec2(12);
    intr13 = $inec2(13);
    intr14 = $inec2(14);
    intr15 = $inec2(15);
    intr16 = $inec2(16);
    intr17 = $inec2(17);
    intr18 = $inec2(18);
    intr19 = $inec2(19);
    intr20 = $inec2(20);
    intr21 = $inec2(21);
    intr22 = $inec2(22);
    intr23 = $inec2(23);
    intr24 = $inec2(24);
    intr25 = $inec2(25);
    intr26 = $inec2(26);
    intr27 = $inec2(27);
    intr28 = $inec2(28);
    intr29 = $inec2(29);
    intr30 = $inec2(30);
    intr31 = $inec2(31);
    rciica = $IntEC2;
    rciisa = %xfoot($isa);
    rciicn = %xfoot($ic) + %xfoot($icaec2);
    rciinc = rciisa + rciicn;
    rciist = $IntEC3;
    rciflg = $Flag;
    write rtjt036;
  End-Proc GrabarInt;
